package blogs;

import (
	"harmeepatel.dev/web/components"
	"harmeepatel.dev/web/layouts"
)

templ AutomatingTemplGenerateInNeovim(title string) {
	@layouts.BlogBase(title) {
		<h2>Prelude</h2>
		<p>
			I've been using 
			<a
				href="https://neovim.io/"
				target="_blank"
				class="link"
				aria-label="Link to more information on neovim."
			>
				Neovim
			</a>
			{ "for" } the past four years as my 
			<a
				href="https://youtu.be/QMVIJhC9Veg?feature=shared"
				target="_blank"
				class="link"
				aria-label="Personalized Development Environment (PDE) talk by teej_dv"
			>
				Personalized Development Environment (PDE)
			</a> of choise.
			Neovim gave me many rabbit holes to dive into including but not limited to:
		</p>
		<ul>
			<li>
				Understanding the inner workings of an IDE and the various parts to configure that 
				makes it a PDE.
			</li>
			<li>
				Learning <i>Lua</i>, Neovim’s configuration and extension language, and using it to
				wire up tools like:
				<ul>
					<li>
						<a
							href="https://github.com/nvim-treesitter/nvim-treesitter"
							target="_blank"
							class="link"
							aria-label="Github repo for nvim-treesitter"
						>
							nvim-treesitter
						</a>
						{ "for" } syntax highlighting.
					</li>
					<li>
						<a
							href="https://github.com/williamboman/mason.nvim"
							target="_blank"
							class="link"
							aria-label="Github repo for mason"
						>
							mason
						</a>
						{ "for" } downloading and managing
						<a
							href="https://en.wikipedia.org/wiki/Language_Server_Protocol"
							target="_blank"
							class="link"
							aria-label="Wikipedia page for more information on language server protocols"
						>
							Language Servers (LSPs)
						</a>.
					</li>
					<li>
						<a
							href="https://github.com/neovim/nvim-lspconfig"
							target="_blank"
							class="link"
							aria-label="Github repo for nvim-treesitter"
						>
							nvim-lspconfig
						</a>
						{ "for" } configuring and customizing LSPs.
					</li>
					<li>
						<a
							href="https://github.com/hrsh7th/nvim-cmp"
							target="_blank"
							class="link"
							aria-label="Github repo for nvim-cmp"
						>
							nvim-cmp
						</a>
						, a completion engine that suggests code snippets.
					</li>
				</ul>
			</li>
			<li>
				Debugging things by digging into system files (because nothing ever works on the 
				first try). This led me down a deeper rabbit hole of UNIX system and Linux research.
			</li>
			<li>Becoming more comfortable with the terminal and command-line interfaces (CLIs).</li>
		</ul>
		<h2>
			Why Automate 
			@components.InlineCode("templ generate")
			?
		</h2>
		<p>The structure of this website follows:</p>
        <svg width="640" viewBox="0 0 640 124" fill="none" class="!max-w-full mb-4 md:mt-5 md:mb-8" xmlns="http://www.w3.org/2000/svg">
            <rect x="1" y="1" width="289" height="122" rx="14" stroke="currentColor" stroke-width="2"></rect>
            <text x="123" y="32" fill="currentColor" class="font-mono">Templ</text>
            <text x="15" y="64" fill="currentColor" class="font-mono">Templating enging to create</text>
            <text x="15" y="83" fill="currentColor" class="font-mono">reusable components for the</text>
            <text x="15" y="102" fill="currentColor" class="font-mono">website.</text>
            <rect x="385" y="1" width="254" height="122" rx="14" stroke="currentColor" stroke-width="2"></rect>
            <text x="500" y="32" fill="currentColor" class="font-mono">Go</text>
            <text x="401" y="64" fill="currentColor" class="font-mono">Handles the static html</text>
            <text x="401" y="83" fill="currentColor" class="font-mono">generation for the main</text>
            <text x="401" y="102" fill="currentColor" class="font-mono">branch.</text>
            <path d="M290.917 62L381 62" stroke="currentColor" stroke-width="2"></path>
            <path d="M384 62L375.75 68.0622L375.75 55.9378L384 62Z" fill="currentColor"></path>
        </svg>
		<p>
			Templ provides a command-line interface that requires running 
			@components.InlineCode("templ generate")
			to convert 
			@components.InlineCode(".templ")
			files into Go code. However, manually running this command after every file change is 
			tedious and disrupts workflow. As programmers, we naturally look for ways to automate
			repetitive tasks.
		</p>
		<p>
			If you use Neovim (there might be a way to replicate this for your editor of choise), 
			<a
				href="https://neovim.io/doc/user/autocmd.html"
				target="_blank"
				class="link"
				aria-label="Link to more information on neovim autocmd."
			>
				autocmds
			</a>
			&nbsp;provide an excellent way to automate this process.
		</p>

		<h2>Setting Up the Autocmd</h2>
		<p>
			We can automatically run templ generate after saving a 
			@components.InlineCode(".templ")
			file by adding the following autocmd to the Neovim configuration (e.g., init.lua 
			or another Lua file):
		</p>

		{{
	src := `vim.api.nvim_create_autocmd({ 'BufWritePost' }, {
    desc = 'Run templ generate on save',
    group = [your-augroup], -- Replace with your autocmd group or remove if unnecessary
    pattern = { '*.templ' },
    callback = function()
        vim.cmd(':silent !templ generate')
    end
})`
		}}
		@components.Code("lua", "init.lua",string(src))
        <p>Let's break this down. We're using 
        @components.InlineCode("nvim_create_autocmd")
        to create a new autocmd. As args it takes the following:</p>
        <ul>
            <li>
                @components.InlineCode("events"):
                The first argument is a table (Lua’s all-purpose data structure) that defines the 
                events that trigger the callback. You can specify multiple events if needed. You can
                find all the events 
                <a 
                    href="https://neovim.io/doc/user/autocmd.html#_5.-events" 
                    target="_blank"
                    class="link"
                    aria-label="Link to more information on events for neovim autocmd."
                >
                    here
                </a>.
            </li>
            <li>
                @components.InlineCode("opts"):
                The second argument includes various options, like the file pattern to match and 
                the callback itself. The callback can be either a Lua function or a Vimscript 
                function name as a string.
                <a 
                    href="https://neovim.io/doc/user/autocmd.html#_5.-events" 
                    target="_blank"
                    class="link"
                    aria-label="Link to more information on events for neovim autocmd."
                >
                    here
                </a>.
            </li>
        </ul>
		<p>
			Replace 
			@components.InlineCode("[your-augroup]")
			with an 
			<a
				href="https://neovim.io/doc/user/autocmd.html#_8.-groups"
				target="_blank"
				class="link"
				aria-label="Link to more information on neovim autocmd groups."
			>
				autocmd group
			</a>
			&nbsp;to keep things organized. This is useful for removing or executing a group of 
            autocmds. If you need to create one, use:
		</p>

		{{
	src = "local templ_group = vim.api.nvim_create_augroup('[YourGroupName]', { clear = true })"
		}}
		@components.Code("lua", "",src)
		<p>
			If you work with Templ frequently, this small automation can save time and streamline 
			your workflow. Just set it up once, and let Neovim take care of the rest.
			Happy coding!
		</p>
	}
}
