package blogs;

import (
	"harmeepatel.dev/web/components"
	"harmeepatel.dev/web/layouts"
)

templ PolymorphicExecutables(title string) {
	@layouts.BlogBase(title) {
		<h2>Prelude</h2>
		<p>
			I was recommended 
			<a
				href="https://www.youtube.com/watch?v=dv6NP7qjMS0"
				target="_blank"
				class="link"
				aria-label="Link to the youtube video about polymorphic executables."
			>this</a>
			video on YouTube, and I found it very interesting and useful, so here I am writing about it.
			But what are polymorphic executables, you may ask? Polymorphic executables are scripts or 
			programs that can change their behavior based on how they're invoked. This means creating a
			script that checks its own invocation name 
			(
			@components.InlineCode("$0")
			first argument in the executable which is the executable itself, more 
			<a
				href="https://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html"
				target="_blank"
				class="link"
				aria-label="Link to the information about $0."
			>here</a>) and performs different 
			actions accordingly. 
		</p>
		<h2>Batman and Robin</h2>
		<p>I think it will be easier if I show you how it works. So here is an example of how this executable is polymorphic:</p>
		<h3>1. First, create the script</h3>
		{{src := `#!/bin/bash
# use basename to not have to deal with paths
case $(basename "$0") in
    batman)
        echo "I'm Batman!";
        ;;
    robinDG)
       echo "And I'm robin (dick grayson)";
       ;;
    robinTD)
       echo "And I'm robin (tim drake)";
       ;;
    robinDW)
        echo "And I'm robin (damian wayne)";
        ;;
    *)
        echo "catch all [ $0 ]!"
        ;;
esac`
		}}
		@components.Code("bash", "", src)
		<p>
			Here we use a 
			@components.InlineCode("") {
				<a
					href="https://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_03.html"
					target="_blank"
					class="link"
					aria-label="Link to the guide on using case statements in bash."
				>
					code
				</a>
			}
			to check the value of 
			@components.InlineCode(`$0`)
			. Depending on that name, it outputs a different message.
		</p>

		<h3>2. Make it executable</h3>
		{{ src = "$ chmod +x batman" }}
		@components.Code("console", "", src)

		<h3>3. When we run it directly, we get</h3>
		{{src = `$ ./batman
I'm Batman! `
		}}
		@components.Code("console", "", src)
		<h3>
			4. Now, let's create 
			<a
				href="https://man7.org/linux/man-pages/man1/ln.1.html"
				target="_blank"
				class="link"
				aria-label="Link to the information about symbolic links."
			>
				symbolic links
			</a>
			to the same script but with different names
		</h3>
		{{src = `$ ln -s batman robinDG
$ ln -s batman robinTD
$ ln -s batman robinDW
$ 
$ ls -l
total 8
-rwxr-xr-x@ 2 host  staff  348 12 Mar 14:28 batman
lrwxr-xr-x@ 1 host  staff    6 12 Mar 13:35 robinDG -> batman
lrwxr-xr-x@ 1 host  staff    6 12 Mar 13:36 robinDW -> batman
lrwxr-xr-x@ 1 host  staff    6 12 Mar 13:35 robinTD -> batman `
		}}
		@components.Code("console", "", src)
		<h3>5. When we run the script through these different symlinks</h3>
		{{src = `$ ./robinDG
And I'm robin (dick grayson)
$ ./robinTD
And I'm robin (tim drake)
$ ./robinDW
And I'm robin (damian wayne)` }}
		@components.Code("console", "", src)
		<p>Each invocation produces different output, even though they're all pointing to the same executable!</p>
		<h2>Practical Applications</h2>
		<h3>BusyBox-Style Utilities</h3>
		<p>
			The popular 
			<a
				href="https://busybox.net/about.html"
				target="_blank"
				class="link"
				aria-label="Link to the information about busybox."
			>
                BusyBox
			</a>
			utility uses this exact pattern. BusyBox is a single executable
			that provides simplified versions of many common UNIX utilities. When symlinked as `ls`, `cp`, `mv`, etc., it
			behaves accordingly. The 
			<a
				href="https://git.busybox.net/busybox/tree/libbb/appletlib.c"
				target="_blank"
				class="link"
				aria-label="Link to the busybox source code."
			>
                BusyBox source code
			</a>
            shows how
			this is implemented in C.
		</p>

		<h3>Multi-Purpose Scripts</h3>
		<p>Create a single maintenance script that performs different functions based on how it's called:</p>
        {{ src = `#!/bin/bash
case $(basename "$0") in
  backup)
    # Backup functionality
    ;;
  restore)
    # Restore functionality
    ;;
  cleanup)
    # Cleanup functionality
    ;;
esac`}}
		@components.Code("bash", "", src)
        
		<h3>Installation Scripts</h3>
        <p>A single script could handle installation, uninstallation, and updates based on symlinks named `install`,
            `uninstall`, and `update`. The 
			<a
				href="https://github.com/git/git"
				target="_blank"
				class="link"
				aria-label="Link to the information about git projects."
			>
                Git Project
			</a>
            uses a similar approach for some of its
            utilities.</p>
	}
}
