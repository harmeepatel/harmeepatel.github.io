package pages;

import (
	"harmeepatel.dev/web/layouts"
	"harmeepatel.dev/web/icons"
	"strconv"
	"strings"
)

// const imgPath = "./static/media/images/gallery/"

func generateAlt(s string) string {
	before, _ := strings.CutSuffix(s, ".webp")
	frag := strings.Split(before, "/")
	return frag[len(frag)-1]
}

func addAspectRatio(image ImgInfo, class string) string {
	if image.IsWide() {
		return class + " aspect-[5/4]"
	} else {
		return class + " aspect-[4/5]"
	}
}

func (img ImgInfo) IsWide() bool {
	return img.Width > img.Height
}

type ImgInfo struct {
	Name   string
	Width  int
	Height int
}

// "harmeepatel.dev/web/components"
templ Photos(title string, photos [][]ImgInfo) {
	{{ smImgs := photos[0]
lgImgs := photos[1] }}
	@layouts.PhotoBase(title) {
		<dialog id="image_modal" class="m-auto h-screen bg-transparent backdrop:bg-black/90 dark:backdrop:bg-black/20 backdrop:backdrop-blur-lg">
			<form method="dialog">
				<button 
                    class="w-8 h-8 ring-2 ring-white duration-100 rounded-full text-white fixed right-4 top-4 md:right-8 md:top-8 backdrop-blur-xs hover:backdrop-blur-md select-none"
                    onclick="closeImageModal(this)"
                >
                    ✕
                </button>
			</form>
			<div class="m-auto h-full flex flex-col items-center justify-evenly">
				<img id="modal_image" class="max-h-[min(100%,94vh)] mx-8 self-center border-8 border-white duration-300 rounded-2xl" data-loading-class="bg-gray-100 opacity-80" src=""/>
				<p class="text-white">(← → / h l)</p>
			</div>
		</dialog>
		// <main id="photos-sm" class="h-[100dvh] absolute top-0 flex flex-col items-center overflow-x-none overflow-y-scroll snap-y touch-pan-y no-scrollbar">

		<main id="photos" class="h-vh md:mx-14 3xl:mx-0 mt-6 md:mt-8 md:block">
			<div id="image-grid" class="hidden md:flex md:flex-wrap md:justify-center">
				for i := 0; i < 4; i++ {
					<div class="column px-[4px] sm:flex-[100%] sm:max-w-full md:flex-[50%] md:max-w[50%] xl:flex-[25%] xl:max-w-[25%]">
						for j := i; j < len(smImgs) ; j+=4 {
							{{ img := smImgs[j] }}
							<img
								id={ strconv.Itoa(j) }
								src={ img.Name }
								if j == 0 || j == 1 || j == 2 || j == 3 {
									class={ addAspectRatio(img, "row align-center w-full rounded-2xl border-2 border-black dark:border-white md:rounded-xl xl:rounded-lg md:hover:duration-300 md:hover:translate-y-2 md:hover:scale-110 dark:md:hover:shadow-[0_16px_70px_4px_rgba(0,0,0,1)] md:hover:shadow-[0_16px_70px_4px_rgba(0,0,0,0.4)]") }
								} else {
									class={ addAspectRatio(img, "row mt-[8px] align-center w-full rounded-2xl border-2 border-black dark:border-white md:rounded-xl xl:rounded-lg md:hover:duration-300 md:hover:translate-y-2 md:hover:scale-110 dark:md:hover:shadow-[0_16px_70px_4px_rgba(0,0,0,1)] md:hover:shadow-[0_16px_70px_4px_rgba(0,0,0,0.4)]") }
								}
								onclick="openImageModal(this)"
								if img.IsWide() {
									width="500"
									height="400"
								} else {
									width="400"
									height="500"
								}
								alt={ strings.Replace(generateAlt(img.Name), "-", " ", -1) }
							/>
						}
					</div>
				}
			</div>

			{{ imgClass := "m-auto w-full xs:w-4/5 lg:w-full align-center rounded-xl ring-2 ring-black dark:ring-white" }}
			<div id="image-grid-mobile" class="md:hidden">
				for i, img := range(lgImgs) {
					<div class="img-wraper mx-4 my-[5.5rem] snap-center snap-normal">
						<img
							id={ strconv.Itoa(i) }
							src={ img.Name }
							if i == 0 {
								class={ "mt-[8.5rem] " + imgClass }
							} else {
								class={ imgClass }
							}
							if img.IsWide() {
								width="500"
								height="400"
							} else {
								width="400"
								height="500"
							}
							onclick="openImageModal(this)"
							alt={ strings.Replace(generateAlt(smImgs[i].Name), "-", " ", -1) }
							loading="lazy"
						/>
					</div>
				}
			</div>

			{{
                iconClass := "w-[12px] md:w-[16px] opacity-60 hover:opacity-100"
                infoLinkClass := "!text-black dark:!text-white flex items-center"
			}}

			<footer
				id="footer"
				class="max-w-screen-lg w-4/5 m-auto my-4 lg:my-8 bg-light dark:bg-dark ring-1 dark:ring-white/60 ring-black/60 rounded-xl xl:rounded-2xl"
			>
				<div class="py-3.5 px-6 md:py-5 md:px-10">
					<div class="flex justify-center items-center gap-3 md:gap-6 pb-3 sm:pb-6">
						<a href="/" target="" class={infoLinkClass} aria-label="HP my name initials">
                            @icons.HpBlack(icons.IconInfo{Width: 12, Class: "w-[14px] md:w-[20px] h-full opacity-60 hover:opacity-100", Alt: "My initials HP"})
						</a>
						<a href="tel:+16478321245" target="_blank" class={infoLinkClass} aria-label="phone">
                            @icons.Phone(icons.IconInfo{Width: 12, Class: iconClass, Alt: "Phone icon"})
						</a>
						<a href="https://github.com/harmeepatel" target="_blank" class={infoLinkClass} aria-label="github">
                            @icons.Github(icons.IconInfo{Width: 12, Class: iconClass, Alt: "Github icon"})
						</a>
						<a href="https://ca.linkedin.com/in/harmeepatel" target="_blank" class={infoLinkClass} aria-label="linkedin">
                            @icons.Linkedin(icons.IconInfo{Width: 12, Class: iconClass, Alt: "Linkedin icon"})
						</a>
						<a href="mailto:harmeeworks@gmail.com" target="_blank" class={infoLinkClass} aria-label="email">
                            @icons.Email(icons.IconInfo{Width: 12, Class: iconClass, Alt: "Email icon"})
						</a>
						<a href="https://www.instagram.com/harmee.png/" target="_blank" class={infoLinkClass} aria-label="instagram">
                            @icons.Ig(icons.IconInfo{Width: 12, Class: iconClass, Alt: "Instagram icon"})
						</a>
					</div>
					<p class="text-center opacity-60">© 2024 Harmee Patel. All rights reserved.</p>
				</div>
			</footer>
		</main>
	}
}
