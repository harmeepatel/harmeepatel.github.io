package pages;

import (
	"harmeepatel.dev/web/layouts"
	"harmeepatel.dev/web"
	"strconv"
	"strings"
)

func generateAlt(s string) string {
	before, _ := strings.CutSuffix(s, ".webp")
	frag := strings.Split(before, "/")
	return frag[len(frag)-1]
}

func addAspectRatio(image ImgInfo, class string) string {
	if image.IsWide() {
		return class + " aspect-[5/4]"
	} else {
		return class + " aspect-[4/5]"
	}
}

type ImgInfo struct {
	Name   string
	Width  int
	Height int
}
func (img ImgInfo) IsWide() bool {
	return img.Width > img.Height
}

func (img ImgInfo) GetTitle() string {
    var nameSplit = strings.Split(img.Name, "/");
    var title = strings.TrimSuffix(nameSplit[len(nameSplit)-1], ".webp")
    return strings.ReplaceAll(title, "-", " ")
}


// "harmeepatel.dev/web/components"
templ Photos(title string, photos [][]ImgInfo) {
	{{ 
        smImgs := photos[0]
        //lgImgs := photos[1] 
    }}
	@layouts.PhotoBase(title) {
		<dialog id="image_modal" class="m-auto h-screen bg-transparent backdrop:bg-black/90 dark:backdrop:bg-black/20 backdrop:backdrop-blur-lg">
			<form method="dialog">
				<button 
                    class="w-8 h-8 ring-2 ring-white duration-100 rounded-full text-white fixed right-4 top-4 md:right-8 md:top-8 backdrop-blur-xs hover:backdrop-blur-md select-none"
                    onclick="closeImageModal(this)"
                >
                    ✕
                </button>
			</form>
			<div class="m-auto h-full flex flex-col items-center justify-evenly">
				<img id="modal_image" class="max-h-[min(100%,94vh)] mx-8 self-center border-8 border-white duration-300 rounded-2xl" data-loading-class="bg-gray-100 opacity-80" src=""/>
				<p class="text-white">← / → | h / l</p>
			</div>
		</dialog>


        <aside class="flex justify-center mt-4 md:hidden">
            <div id="arrow-left" class="px-2 animate-bounce-left text-2xl font-extralight">←</div>
            <div id="arrow-right" class="px-2 hidden text-2xl font-extralight">→</div>
        </aside>

        <main id="image-grid" class="h-vh md:mx-14 3xl:mx-0 mb-10 mt-10 md:my-8 px-4 md:px-0 snap-x snap-proximity overflow-x-scroll flex gap-8 md:grid md:gap-2">
            for j := 0; j < len(smImgs) ; j+=1 {
                {{ 
                    img := smImgs[j] 
                }}

                <figure class={ "m-auto md:m-0 md:grid min-w-full rounded-xl md:border-1 group snap-always snap-center @container" }>
                    <img
                        id={ strconv.Itoa(j) }
                        src={ img.Name }
                        class={ addAspectRatio(img, " [inline-size:100%] [grid-area:1/1/-1/-1] border-4 md:border-0 transition-all duration-200 object-cover rounded-xl md:rounded-none md:[block-size:100%] md:group-hover:scale-103") }
                        onclick="openImageModal(this)"
                        if img.IsWide() {
                            width="500"
                            height="400"
                        } else {
                            width="400"
                            height="500"
                        }
                        alt={ strings.Replace(generateAlt(img.Name), "-", " ", -1) }
                    >

                    {{ class := "hidden @md:block [grid-area:1/1/-1/-1] self-baseline backdrop-blur-md bg-black/15 px-4 py-2 z-10" }}
                    <figcaption
                        if img.IsWide() {
                            class={ class }
                        } else {
                            class={ class + "" }
                        }
                    >
                        <p class="text-white font-mono text-xs">{ web.FixTitle(img.GetTitle()) }</p>
                    </figcaption>
                </figure>

            }
        </main>
	}
}
