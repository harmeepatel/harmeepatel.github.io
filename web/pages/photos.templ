package pages;

import (
	"harmeepatel.dev/web/layouts"
	"log"
	"strconv"
	"strings"
)

const imgPath = "./static/media/images/gallery/"

func genPhotoId(s string) string {
	before, found := strings.CutSuffix(s, ".webp")
	if !found {
		log.Fatal("prefix not found")
	}
	return before
}

// "harmeepatel.dev/web/components"
templ Photos(title string, photos []string) {
	@layouts.PhotoBase(title) {
		<dialog id="image_modal" class="h-screen bg-transparent backdrop:bg-black/90 dark:backdrop:bg-black/20 backdrop:backdrop-blur-lg">
			<form method="dialog">
				<button class="w-8 h-8 ring-2 ring-white hover:bg-gray-600 duration-100 rounded-full text-white fixed right-4 top-4 md:right-8 md:top-8 unselectable">âœ•</button>
			</form>
			<div class="h-full flex">
				<button id="dialog-arrow-left" class="h-fit self-center" onclick="leftImage()">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="white" class="size-5 md:size-7">
						<path stroke-linecap="round" stroke-linejoin="round" d="M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18"></path>
					</svg>
				</button>
				<img id="modal_image" class="max-w-[min(88%,100vw)] max-h-[-webkit-fill-available] mx-8 self-center border-8 border-white" src=""/>
				<button id="dialog-arrow-right" class="h-fit self-center" onclick="rightImage()">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="3" stroke="white" class="size-5 md:size-7">
						<path stroke-linecap="round" stroke-linejoin="round" d="M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3"></path>
					</svg>
				</button>
			</div>
		</dialog>

		<main id="photos-md" class="h-vh mx-6 md:mx-14 3xl:mx-0 mt-6 md:mt-8 hidden md:block">
			<div id="image-grid" class="flex flex-wrap">
				for i := range [4]int{} {
					<div class="column px-[4px] sm:flex-[100%] sm:max-w-full md:flex-[50%] md:max-w[50%] xl:flex-[25%] xl:max-w-[25%]">
						for j := i; j < len(photos) ; j+=4 {
							<img
								id={ strconv.Itoa(j) + "-" + genPhotoId(photos[j]) }
								src={ imgPath + photos[j] }
								class="mt-[8px] align-center w-full rounded-2xl md:rounded-xl xl:rounded-lg md:hover:duration-300 md:hover:translate-y-2 dark:md:hover:shadow-[0_16px_70px_4px_rgba(0,0,0,1)] md:hover:shadow-[0_16px_70px_4px_rgba(0,0,0,0.4)] md:hover:scale-110"
								onclick="openImageModal(this)"
							/>
						}
					</div>
				}
			</div>
		</main>

		<main id="photos-sm" class="h-[100dvh] absolute top-0 flex flex-col items-center overflow-x-none overflow-y-scroll snap-y snap-mandatory touch-pan-y no-scrollbar md:hidden">
			for j := 0; j < len(photos) ; j+=1 {
				<div class="img-wraper mx-4 snap-center snap-always">
					<img
						id={ strconv.Itoa(j) + "-" + genPhotoId(photos[j]) }
						src={ imgPath + photos[j] }
						class="align-center w-full rounded-lg ring-2 ring-black dark:ring-white"
						onclick="openImageModal(this)"
					/>
				</div>
			}
		</main>
	}
}
